[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "django-markup"
version = "1.9.1"
description = "A generic Django application to convert text with specific markup to html."
authors = ["Martin Mahner <martin@mahner.org>"]
license = "MIT"
readme = ["README.md", "CHANGELOG.md"]
homepage = "https://github.com/bartTC/django-markup/"
classifiers = [
	"Development Status :: 6 - Mature",
	"Programming Language :: Python :: 3 :: Only",
    "Environment :: Other Environment",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = "^3.8"
django = ">=3.2"
textile = {version = ">=2.3.16", extras = ["all_filter_dependencies"]}
smartypants = {version = ">=2.0.0", extras = ["all_filter_dependencies"]}
docutils = {version = ">=0.14", extras = ["all_filter_dependencies"]}
pygments = {version = ">=2.10.0", extras = ["all_filter_dependencies"]}
markdown = {version = ">=2.6.9", extras = ["all_filter_dependencies"]}
bleach = {version = ">=3.0", extras = ["all_filter_dependencies"]}
python-creole = {version = ">=1.3.1", extras = ["all_filter_dependencies"]}

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.5"
pytest-django = "^4.8.0"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
typing-extensions = "^4.11.0"
coverage = "^7.4.4"

[tool.ruff]
target-version = "py38"
exclude = ["migrations"]
lint.select = ["ALL"]
lint.ignore = [
  "ANN101",   # Missing Type Annotation for "self"
  "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`"
  "ARG001",   # Unused function argument (request, ...)
  "ARG002",   # Unused method argument (*args, **kwargs)
  "D",        # Missing or badly formatted docstrings
  "FBT",      # Flake Boolean Trap (don't use arg=True in functions)
  "RUF012",   # Mutable class attributes https://github.com/astral-sh/ruff/issues/5243

  "COM812",   # (ruff format) Checks for the absence of trailing commas
  "ISC001",   # (ruff format) Checks for implicitly concatenated strings on a single line
]

[tool.ruff.lint.extend-per-file-ignores]
"test_*.py" = [
  "S101",     # S101 Use of `assert` detected
  "PLR2004",  # Magic value used in comparison,
]


[tool.mypy]
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
exclude = ".*/migrations/.*"

[tool.pytest.ini_options]
python_files = [
  "tests.py",
  "test_*.py",
  "*_tests.py",
]
addopts = """
    --ds=django_markup.tests.settings
    --cov=./django_markup
    --cov-append
    --cov-branch
    --nomigrations
    --reuse-db
"""
filterwarnings = ["ignore::RuntimeWarning"]

[tool.coverage]
run.omit = [
  "django_markup/tests/*",
]
report.exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
]